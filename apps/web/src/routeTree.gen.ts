/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedOrgsRouteImport } from './routes/_authenticated/orgs'
import { Route as AuthenticatedActiveOrgRouteImport } from './routes/_authenticated/_active-org'
import { Route as AuthenticatedActiveOrgIndexRouteImport } from './routes/_authenticated/_active-org/index'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOrgsRoute = AuthenticatedOrgsRouteImport.update({
  id: '/orgs',
  path: '/orgs',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedActiveOrgRoute = AuthenticatedActiveOrgRouteImport.update({
  id: '/_active-org',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedActiveOrgIndexRoute =
  AuthenticatedActiveOrgIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedActiveOrgRoute,
  } as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/orgs': typeof AuthenticatedOrgsRoute
  '/': typeof AuthenticatedActiveOrgIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/orgs': typeof AuthenticatedOrgsRoute
  '/': typeof AuthenticatedActiveOrgIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/_authenticated/_active-org': typeof AuthenticatedActiveOrgRouteWithChildren
  '/_authenticated/orgs': typeof AuthenticatedOrgsRoute
  '/_authenticated/_active-org/': typeof AuthenticatedActiveOrgIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/logout' | '/orgs' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/logout' | '/orgs' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/logout'
    | '/_authenticated/_active-org'
    | '/_authenticated/orgs'
    | '/_authenticated/_active-org/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
}
export interface FileServerRoutesByFullPath {
  '/api/users': typeof ApiUsersServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users': typeof ApiUsersServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users': typeof ApiUsersServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users' | '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/users' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersServerRoute: typeof ApiUsersServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/orgs': {
      id: '/_authenticated/orgs'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof AuthenticatedOrgsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_active-org': {
      id: '/_authenticated/_active-org'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedActiveOrgRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_active-org/': {
      id: '/_authenticated/_active-org/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedActiveOrgIndexRouteImport
      parentRoute: typeof AuthenticatedActiveOrgRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthenticatedActiveOrgRouteChildren {
  AuthenticatedActiveOrgIndexRoute: typeof AuthenticatedActiveOrgIndexRoute
}

const AuthenticatedActiveOrgRouteChildren: AuthenticatedActiveOrgRouteChildren =
  {
    AuthenticatedActiveOrgIndexRoute: AuthenticatedActiveOrgIndexRoute,
  }

const AuthenticatedActiveOrgRouteWithChildren =
  AuthenticatedActiveOrgRoute._addFileChildren(
    AuthenticatedActiveOrgRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedActiveOrgRoute: typeof AuthenticatedActiveOrgRouteWithChildren
  AuthenticatedOrgsRoute: typeof AuthenticatedOrgsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedActiveOrgRoute: AuthenticatedActiveOrgRouteWithChildren,
  AuthenticatedOrgsRoute: AuthenticatedOrgsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersServerRoute: ApiUsersServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
